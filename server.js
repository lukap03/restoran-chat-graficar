const fs = require("fs");
const path = require("path");
const express = require('express');
require('dotenv').config();
const rateLimit = require('express-rate-limit');

const TRAINING_DATA_PATH = path.join(__dirname, "restaurant-info.txt");
const LOG_PATH = path.join(__dirname, "chat-log.json");

const rezervacijaLink = "https://w.eventlin.com/Restoran-Graficar?merchant=23853";

let trainingData = "";
try {
  trainingData = fs.readFileSync(TRAINING_DATA_PATH, "utf8");
  console.log("üìö Uƒçitani podaci iz TXT fajla");
} catch (err) {
  console.error("‚ùå Gre≈°ka pri uƒçitavanju .txt fajla:", err);
}

const app = express();
const PORT = 3000;

app.use(express.json());
app.use(express.static('public')); // Slu≈æi statiƒçke fajlove (index.html, itd.)

const limiter = rateLimit({
  windowMs: 1 * 60 * 1000,
  max: 5,
  message: {
    success: false,
    error: "Previ≈°e zahteva. Poku≈°aj ponovo za minut."
  }
});
app.use('/api/chat', limiter);

// === Pomoƒáne funkcije ===

function isReservationQuestion(userMessage) {
  const reservationKeywords = [
    "rezervacija", "rezervisem", "rezervisati", "sto",
    "rezervisati sto", "mogu li da rezervi≈°em"
  ];
  const lowerCaseMessage = userMessage.toLowerCase();
  return reservationKeywords.some(keyword => lowerCaseMessage.includes(keyword));
}

function formatResponse(text) {
  const paragraphs = text.split('\n').map(line => line.trim()).filter(line => line !== '');

  const formatted = paragraphs.map(paragraph => {
    // Ako veƒá sadr≈æi HTML tag (npr. link koji si ubacio ruƒçno), nemoj ni≈°ta dirati
    if (paragraph.includes('<a')) {
      return `<p>${paragraph}</p>`;
    }

    const withPhoneLinks = paragraph.replace(
      /(\+?\d[\d\s\-\/]{7,}\d)/g,
      '<a href="tel:$1" style="text-decoration: underline;">$1</a>'
    );
    const withLinks = withPhoneLinks.replace(
      /(https?:\/\/[^\s]+)/g,
      '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>'
    );
    return `<p>${withLinks}</p>`;
  });

  return formatted.join('');
}



// === API Chat ruta ===

app.post('/api/chat', async (req, res) => {
  const { userMessage } = req.body;

  if (!userMessage || typeof userMessage !== 'string') {
    return res.status(400).json({ success: false, error: "Nevalidna poruka. Mora biti tekstualna vrednost." });
  }

  const trimmedMessage = userMessage.trim();

  if (trimmedMessage.length === 0) {
    return res.status(400).json({ success: false, error: "Poruka ne mo≈æe biti prazna." });
  }

  if (trimmedMessage.length > 500) {
    return res.status(400).json({ success: false, error: "Poruka je predugaƒçka. Maksimum je 500 karaktera." });
  }

  if (!process.env.OPENAI_API_KEY) {
    console.error("‚õî OPENAI_API_KEY nije definisan!");
    return res.status(500).json({ error: "API kljuƒç nije postavljen." });
  }

  try {
    // === Detekcija jezika ===
    /*function isRussianText(text) {
  const russianChars = /[–ê-–Ø–∞-—è–Å—ë–´—ã–≠—ç–™—ä–ñ–∂–®—à–©—â–Æ—é–Ø—è–ô–π]/;
  const lowerText = text.toLowerCase();

  const commonRussianWords = [
    "–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫", "–¥–µ–ª–∞", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–º–µ–Ω—é",
    "—Å—Ç–æ–ª", "—Å—Ç–æ–ª–∏–∫", "—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è", "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "–∑–∞–∫–∞–∑", "–æ—Ñ–∏—Ü–∏–∞–Ω—Ç", "–¥–µ—Å–µ—Ä—Ç", "–Ω–∞–ø–∏—Ç–∫–∏", "–µ–¥–∞",
    "–±–ª—é–¥–æ", "—Å—É–ø", "—Å–∞–ª–∞—Ç", "–≥–æ—Ä—è—á–µ–µ", "–≤–∏–Ω–æ", "–ø–∏–≤–æ", "—á–µ–∫", "—Å—á—ë—Ç", "–æ–ø–ª–∞—Ç–∞", "–≤–∫—É—Å–Ω–æ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω",
    "—Ä–∞–±–æ—Ç–∞–µ—Ç–µ", "–æ—Ç–∫—Ä—ã—Ç–æ", "–∑–∞–∫—Ä—ã—Ç–æ", "–º–æ–∂–Ω–æ", "–≥–¥–µ", "—è —Ö–æ—á—É", "—è —Ö–æ—Ç–µ–ª –±—ã", "–ø—Ä–∏–Ω–µ—Å–∏—Ç–µ", "–∂–¥—É"
  ];

  const hasRussianChar = russianChars.test(text);
  const hasCommonWord = commonRussianWords.some(word => lowerText.includes(word));

  // Ako ima mnogo ƒáiriliƒçnih karaktera, verovatno je ruski
  const russianCharCount = (text.match(russianChars) || []).length;

  return hasRussianChar && (hasCommonWord || russianCharCount > 5);
}


let languageCode = "sr"; // podrazumevano

if (isRussianText(userMessage)) {
  languageCode = "ru";
} else {
  // Ako nije jasno, koristi OpenAI za preciznu detekciju
  const detectLangRes = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
    },
    body: JSON.stringify({
      model: "gpt-4-turbo",
      messages: [{
        role: "user",
        content: `Koji je ISO 639-1 kod jezika ovog teksta: "${userMessage}"? Odgovori samo sa taƒçno dvoslovnim kodom jezika, bez dodatnog teksta.`
      }]
    })
  });

  const detectData = await detectLangRes.json();
  languageCode = detectData?.choices?.[0]?.message?.content?.trim().toLowerCase() || "sr";
}*/

const detectLangRes = await fetch("https://libretranslate.com/detect", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({ q: userMessage })
});
const detectData = await detectLangRes.json();
languageCode = detectData?.[0]?.language || "sr";



    // === Generisanje odgovora ===
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: `
              Ti si ljubazan, strpljiv i profesionalan konobar restorana Grafiƒçar iz Beograda.
              Odgovaraj na jeziku korisnika (jezik poruke: ${languageCode}).
              Ako korisnik koristi neki strani jezik, ti se prilagodi i pi≈°i na tom jeziku.
              ${trainingData}.
              Kada te pita za meni, posalji sve kategorije i pitaj koja ga kategorija zanima.
              Ako gost ≈æeli da naruƒçi, reci mu da je jedina opcija za naruƒçivanje putem konobara u restoranu.
            `
          },
          {
            role: "user",
            content: trimmedMessage
          }
        ]
      })
    });

    const data = await openaiRes.json();
    console.log("üîç OpenAI odgovor:", data);

    if (openaiRes.status !== 200) {
      return res.status(500).json({ error: "Gre≈°ka iz OpenAI API-ja", details: data });
    }

    let rawReply = data?.choices?.[0]?.message?.content || "Bot nije odgovorio.";

    rawReply = rawReply.replace(/^pozdrav[!.]*\s*/i, '');

    if (isReservationQuestion(userMessage)) {
  rawReply += `\n\nZa vi≈°e informacija i da izvr≈°ite rezervaciju, kliknite <a href="${rezervacijaLink}" target="_blank" rel="noopener noreferrer">ovde</a>.`;
}


    const reply = formatResponse(rawReply);

    const logEntry = {
      timestamp: new Date().toISOString(),
      question: userMessage,
      answer: reply
    };

    fs.readFile(LOG_PATH, "utf8", (err, fileData) => {
      let logs = [];
      if (!err && fileData) {
        try {
          logs = JSON.parse(fileData);
        } catch (e) {
          console.error("Gre≈°ka pri parsiranju loga:", e);
        }
      }
      logs.push(logEntry);
      fs.writeFile(LOG_PATH, JSON.stringify(logs, null, 2), (err) => {
        if (err) console.error("Gre≈°ka pri upisu loga:", err);
      });
    });

    res.json({ choices: [{ message: { content: reply } }] });

  } catch (err) {
    console.error("‚ùå Do≈°lo je do gre≈°ke:", err);
    res.status(500).json({ error: "Do≈°lo je do gre≈°ke pri komunikaciji sa OpenAI-jem." });
  }
});

app.listen(PORT, () => {
  console.log(`‚úÖ Server radi na http://localhost:${PORT}`);
});
